/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_NORMALMAP_OPTIONS
#define OSGEARTH_DRIVER_NORMALMAP_OPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/URI>

namespace osgEarth { namespace NormalMap
{
    using namespace osgEarth;

    /**
     * Options governing normal mapping of the terrain.
     */
    class NormalMapOptions : public DriverConfigOptions // NO EXPORT; header only
    {
    public:
        // Normal map texture to load.
        optional<URI>& imageURI() { return _imageURI; }
        const optional<URI>& imageURI() const { return _imageURI; }

        // Intensity of normal map effect.
        optional<float>& intensity() { return _intensity; }
        const optional<float>& intensity() const { return _intensity; }

        // Scale factor for the normal map texture.
        optional<float>& scale() { return _scale; }
        const optional<float>& scale() const { return _scale; }

    public:
        NormalMapOptions( const ConfigOptions& opt =ConfigOptions() ) : DriverConfigOptions( opt )
        {
            setDriver( "normalmap" );
            _intensity.init( 1.0f );
            _scale.init( 1.0f );
            fromConfig( _conf );
        }

        virtual ~NormalMapOptions() { }

    public:
        Config getConfig() const {
            Config conf = DriverConfigOptions::getConfig();
            conf.updateIfSet("image",     _imageURI);
            conf.updateIfSet("intensity", _intensity);
            conf.updateIfSet("scale",     _scale);
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            DriverConfigOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet("image",     _imageURI);
            conf.getIfSet("intensity", _intensity);
            conf.getIfSet("scale",     _scale);
        }

        optional<URI>   _imageURI;
        optional<float> _intensity;
        optional<float> _scale;
    };

} } // namespace osgEarth::NormalMap

#endif // OSGEARTH_DRIVER_NORMALMAP_OPTIONS

