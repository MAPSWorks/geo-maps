/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_NORMALMAP_SHADERS
#define OSGEARTH_NORMALMAP_SHADERS 1

#undef  MULTILINE
#define MULTILINE(...) #__VA_ARGS__
namespace
{
//---------------------------------------------------------

    // Take advantage of the fact that terrain tiles are each
    // in a local tangent plane model space where Z = vec3(0,0,1)
    // approximately for higher LODs at which we care about
    // normal mapping. Given this observation, we can skip all 
    // the usual TBN matrix stuff, yay!

    const char* NormalMapVertexShader = MULTILINE(

        \n#version 110\n
        
        uniform vec4 oe_tile_key;
        uniform float oe_nmap_scale;
        varying vec4 oe_layer_tilec;
        varying vec3 oe_Normal;
        varying vec2 oe_nmap_coords;
        varying float oe_nmap_slope;

        vec2 oe_nmap_scaleCoords(in vec2 coords, in float targetLOD)
        {            
            float dL = oe_tile_key.z - targetLOD;
            float factor = exp2(dL);
            float invFactor = 1.0/factor;
            vec2 scale = vec2(invFactor);
            vec2 result = coords * scale;

            // For upsampling we need to calculate an offset as well\n
            float upSampleToggle = factor >= 1.0 ? 1.0 : 0.0;
            {
                vec2 a = floor(oe_tile_key.xy * invFactor);
                vec2 b = a * factor;
                vec2 c = (a+1.0) * factor;
                vec2 offset = (oe_tile_key.xy-b)/(c-b);
                result += upSampleToggle * offset;
            }

            return result;
        }

        void oe_nmap_vertex(inout vec4 VertexMODEL)
        {            
            // quantize the scale factor
            float iscale = float(int(oe_nmap_scale));
    
            // scale sampling coordinates to a target LOD.
            const float targetLOD = 13.0;
            oe_nmap_coords = oe_nmap_scaleCoords(oe_layer_tilec.st, targetLOD) * iscale;

            // calcluate slope and augment it.
            oe_nmap_slope = clamp(2.5*(1.0-oe_Normal.z), 0.0, 1.0);
        }
    );


//---------------------------------------------------------

    const char* NormalMapFragmentShader = MULTILINE(

        \n#version 110\n

        vec3 oe_global_Normal;

        uniform sampler2D oe_nmap_tex;
        uniform float oe_nmap_intensity;
        varying vec2 oe_nmap_coords;
        varying float oe_nmap_slope;

        void oe_nmap_fragment(inout vec4 color)
        {
            // sample the bump map
            vec3 bump = gl_NormalMatrix * normalize(texture2D(oe_nmap_tex, oe_nmap_coords).xyz * 2.0 - 1.0);

            // permute the normal with the bump.
            oe_global_Normal = normalize(oe_global_Normal + bump*oe_nmap_intensity*oe_nmap_slope);
        }

    );
}

#endif // OSGEARTH_NormalMap_NOISE_SHADERS
