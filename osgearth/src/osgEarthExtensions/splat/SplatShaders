/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_SHADERS
#define OSGEARTH_SPLAT_SHADERS 1

namespace
{
    const char* splatVertexShaderModel =
        "#version 120\n"
        "varying vec3 oe_Normal; \n"
        "varying float oe_splat_slope;\n"
        "void oe_splat_vertex_model(inout vec4 VertexMODEL) \n"
        "{ \n"
        "    oe_splat_slope = 1.0-oe_Normal.z; \n"
        "} \n";

    /**
     * NOTE: tokens of the form "$TOKEN" will be replaced at run time.
     */
    const char* splatVertexShaderView =
        "#version 120\n"

        "#pragma osgEarth include noise.glsl \n"

        // from the terrain engine
        "varying vec4 oe_layer_tilec; \n"
        
        "uniform mat4 $COVERAGE_TEXMAT_UNIFORM; \n"
        "uniform float oe_splat_scaleOffset; \n"

        "varying float oe_splat_range; \n"
        "varying vec2 oe_splat_covtc; \n"
        "varying float oe_splat_scaleOffsetInt; \n"

        "void oe_splat_vertex_view(inout vec4 VertexVIEW) \n"
        "{ \n"
        // range from camera to vertex
        "    oe_splat_range = -VertexVIEW.z/VertexVIEW.w; \n"        
        
        // calculate the coverage sampling coordinates. The texture matrix accounts
        // for any super-sampling that might be in effect for the current LOD.
        "    oe_splat_covtc = ($COVERAGE_TEXMAT_UNIFORM * oe_layer_tilec).st;\n"

        // quantize the scale offset so we take the hit in the FS
        "    oe_splat_scaleOffsetInt = oe_splat_scaleOffset >= 0.0 ? ceil(oe_splat_scaleOffset) : floor(oe_splat_scaleOffset);\n"
        "} \n";


    const char* splatFragmentShader =
        "#version 130\n"
        "#extension GL_EXT_texture_array : enable\n"

        "$SPLAT_EDIT"
        
        // from the terrain engine:
        "varying vec4 oe_layer_tilec; \n"
        "uniform vec4 oe_tile_key; \n"

        // from the vertex shader:
        "varying float oe_splat_slope; \n"
        "varying vec2 oe_splat_covtc; \n"
        "varying float oe_splat_range; \n"
        "varying float oe_splat_scaleOffsetInt; \n"

        // from SplatTerrainEffect:
        "uniform float oe_splat_intensity; \n"
        "uniform float oe_splat_warp; \n"
        "uniform float oe_splat_blur; \n"
        "uniform float oe_splat_covlod; \n"
        "uniform sampler2D oe_splat_coverage_tex; \n"
        "uniform sampler2DArray oe_splat_tex; \n"

        "uniform sampler2D oe_terrain_tex; \n"
        "uniform mat4 oe_terrain_tex_mat; \n"
        "uniform float oe_splat_snow;\n"
        "uniform float oe_splat_detail_range; \n"
        
        // noise controllers.
        // we will probably replace the first 4 with a texture at some point.
        "uniform float oe_splat_freq;\n"
        "uniform float oe_splat_pers;\n"
        "uniform float oe_splat_lac;\n"
        "uniform float oe_splat_octaves;\n"
        "uniform float oe_splat_thresh;\n"
        "uniform float oe_splat_slopeFactor;\n"
        "uniform float oe_splat_saturate;\n"

        // See NoiseShaders
        "float oe_splat_noise2(in vec2);\n"
        "float oe_noise_fractal_2d(in vec2 seed, in float freq, in float pers, in float lac, in int octaves);\n"
        
        // Environment structure passed around locally.
        // (reminder: struct defs cannot include newlines for GLES)
        "struct oe_SplatEnv { "
        " float range; "
        " float elevation; "
        " float noise; "
        "}; \n"

        // Rendering parameters for splat texture and noise-based detail texture.
        "struct oe_SplatRenderInfo { "
        " float primaryIndex; "
        " float detailIndex; "
        " float saturation; "
        " float threshold; "
        " float slope; "
        "}; \n"
                
        // permutation vectors for the warper.
        // highly unlikely that we will use more than 2 or 3 of these in practice.
        "#define OE_SPLAT_MAX_SAMPLES 15\n"
        "const vec2 oe_splat_warpVecs[OE_SPLAT_MAX_SAMPLES] = vec2[]( vec2( -0.942016, -0.399062 ), vec2( 0.845586, -0.768907 ), vec2( 0.344959, 0.293878 ), vec2( -0.915886, 0.457714 ), vec2( -0.815442, -0.879125 ), vec2( -0.382775, 0.276768 ), vec2( 0.974844, 0.756484 ), vec2( 0.443233, -0.975116 ), vec2( 0.53743, -0.473734 ), vec2( -0.264969, -0.41893 ), vec2( 0.791975, 0.190909 ), vec2( -0.241888, 0.997065 ), vec2( -0.8141, 0.914376 ), vec2( 0.199841, 0.786414 ), vec2( 0.143832, -0.141008 )); \n"
        
        // Warps the coverage sampling coordinates to mitigate blockiness.
        "vec2 oe_splat_warpCoverageCoords(int sample, in vec2 splat_tc)\n"
        "{\n"
        "    vec2 v = oe_splat_warpVecs[sample]; \n"
        "    vec2 seed = oe_splat_covtc + v; \n"
        "    float n1 = oe_splat_noise2(seed*100.0); \n"
        "    vec2 tc = oe_splat_covtc + n1*v*oe_splat_warp; \n"
        "    return clamp(tc, 0.0, 1.0); \n"
        "}\n"

        "vec4 oe_splat_getTexel(in float index, in vec2 tc) \n"
        "{ \n"
        "    return texture2DArray(oe_splat_tex, vec3(tc, index)); \n"
        "} \n"

        // Samples a detail texel using its render info parameters.
        // Returns the weighting factor in the alpha channel.
        "vec4 oe_splat_getDetailTexel(in oe_SplatRenderInfo ri, in vec2 tc, in oe_SplatEnv env) \n"
        "{ \n"
        // TODO: pow() function is slow. Consider something faster
        "    float hasDetail = ri.detailIndex >= 0.0 ? 1.0 : 0.0;\n"
        "#ifdef SPLAT_EDIT\n"
        "    float noiseADJ = pow(env.noise, 1.0-oe_splat_saturate);\n"
        "    float threshADJ = clamp( oe_splat_thresh + oe_splat_slopeFactor*(1.0-oe_splat_slope), 0.0, 1.0); \n"
        "#else\n"
        "    float noiseADJ = pow(env.noise, 1.0-ri.saturation); \n"
        "    float threshADJ = clamp( ri.threshold + ri.slope*(1.0-oe_splat_slope), 0.0, 1.0); \n"
        "#endif\n"
        "    vec4 result = oe_splat_getTexel( max(ri.detailIndex,0), tc); \n"
        "    result.a = hasDetail * clamp((noiseADJ-threshADJ)/(1.0-threshADJ),0.0,1.0); \n"
        "    return result; \n"
        "} \n"

        // Samples the coverage data and returns main and detail indices.
        "oe_SplatRenderInfo oe_splat_getRenderInfo(in vec2 tc, in oe_SplatEnv env) \n"
        "{ \n"
        "    float primary = -1.0; \n"   // primary texture index
        "    float detail = -1.0; \n"    // detail texture index
        "    float saturation = 0.0; \n" // default noise function saturation factor
        "    float threshold = 0.0; \n"  // default noise function threshold
        "    float slope = 0.0; \n"      // default slope integration factor
        "    float value = 255.0 * texture2D(oe_splat_coverage_tex, tc).r; \n"
        //"    float value = 255.0 * texture2DLod(oe_splat_coverage_tex, tc, int(oe_splat_covlod)).r; \n"
        "$COVERAGE_BUILD_RENDER_INFO"
        "    return oe_SplatRenderInfo(primary, detail, saturation, threshold, slope); \n"
        "}\n"

        // Generates a texel using nearest-neigher coverage sampling.
        "vec4 oe_splat_nearest(in vec2 splat_tc, in oe_SplatEnv env) \n"
        "{ \n"
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"
        "    oe_SplatRenderInfo ri = oe_splat_getRenderInfo(warped_tc, env); \n"
        "    return oe_splat_getTexel(ri.primaryIndex, splat_tc); \n"
        "} \n"

        // Generates a texel using bilinear filtering on the coverage data.
        "vec4 oe_splat_bilinear(in vec2 splat_tc, in oe_SplatEnv env) \n"
        "{ \n"
        "    vec4 texel = vec4(0,0,0,1); \n"

             //TODO: coverage warping is slow due to the noise function. Consider removing/reworking.
        "    vec2 warped_tc = oe_splat_warpCoverageCoords(0, splat_tc);\n"

        "    float a = oe_splat_blur;\n"
        "    float pixelWidth = a/256.0; \n" // 256 = hard-coded cov tex size //TODO 
        "    float halfPixelWidth = 0.5*pixelWidth; \n"
        "    float pixelWidth2 = pixelWidth*pixelWidth; \n"
        
        // Find the four quantized coverage coordinates that form a box around the actual
        // coverage coordinates, where each quantized coord is at the center of a coverage texel.
        "    vec2 rem = mod(warped_tc, pixelWidth); \n"
        "    vec2 sw = vec2(0); \n"
        "    sw.x = warped_tc.x - rem.x + (rem.x >= halfPixelWidth ? halfPixelWidth : -halfPixelWidth); \n"
        "    sw.y = warped_tc.y - rem.y + (rem.y >= halfPixelWidth ? halfPixelWidth : -halfPixelWidth); \n"
        "    vec2 ne = sw + pixelWidth; \n"
        "    vec2 nw = vec2(sw.x, ne.y); \n"
        "    vec2 se = vec2(ne.x, sw.y); \n"

        // Calculate the weighting for each corner.
        "    vec2 dsw = warped_tc-sw;\n"
        "    vec2 dse = warped_tc-se;\n"
        "    vec2 dne = warped_tc-ne;\n"
        "    vec2 dnw = warped_tc-nw;\n"

        "    float sw_weight = max(pixelWidth2-dot(dsw,dsw),0.0); \n"
        "    float se_weight = max(pixelWidth2-dot(dse,dse),0.0); \n"
        "    float ne_weight = max(pixelWidth2-dot(dne,dne),0.0); \n"
        "    float nw_weight = max(pixelWidth2-dot(dnw,dnw),0.0); \n"

        // normalize the weights so they total 1.0
        "    float invTotalWeight = 1.0/(sw_weight+se_weight+ne_weight+nw_weight);\n"
        "    sw_weight *= invTotalWeight; \n"
        "    se_weight *= invTotalWeight; \n"
        "    ne_weight *= invTotalWeight; \n"
        "    nw_weight *= invTotalWeight; \n"

        // Sample coverage values using quantized corner coords:
        "    oe_SplatRenderInfo ri_sw = oe_splat_getRenderInfo( clamp(sw, 0.0, 1.0), env ); \n"
        "    oe_SplatRenderInfo ri_se = oe_splat_getRenderInfo( clamp(se, 0.0, 1.0), env ); \n"
        "    oe_SplatRenderInfo ri_ne = oe_splat_getRenderInfo( clamp(ne, 0.0, 1.0), env ); \n"
        "    oe_SplatRenderInfo ri_nw = oe_splat_getRenderInfo( clamp(nw, 0.0, 1.0), env ); \n"

        // Primary splat:
        "    vec3 sw_primary = oe_splat_getTexel(ri_sw.primaryIndex, splat_tc).rgb; \n"
        "    vec3 se_primary = oe_splat_getTexel(ri_se.primaryIndex, splat_tc).rgb; \n"
        "    vec3 ne_primary = oe_splat_getTexel(ri_ne.primaryIndex, splat_tc).rgb; \n"
        "    vec3 nw_primary = oe_splat_getTexel(ri_nw.primaryIndex, splat_tc).rgb; \n"
        
        // Detail splat - weighting is in the alpha channel
        // TODO: Pointless to have a detail range? -gw
        "    float detailToggle = env.range < oe_splat_detail_range ? 1.0 : 0.0;\n"
        "    vec4 sw_detail = detailToggle * oe_splat_getDetailTexel(ri_sw, splat_tc, env); \n"
        "    vec4 se_detail = detailToggle * oe_splat_getDetailTexel(ri_se, splat_tc, env); \n"
        "    vec4 ne_detail = detailToggle * oe_splat_getDetailTexel(ri_ne, splat_tc, env); \n"
        "    vec4 nw_detail = detailToggle * oe_splat_getDetailTexel(ri_nw, splat_tc, env); \n"

        // Combine everything based on weighting:
        "    texel.rgb = \n"
        "        sw_weight * mix(sw_primary, sw_detail.rgb, sw_detail.a) + \n"
        "        se_weight * mix(se_primary, se_detail.rgb, se_detail.a) + \n"
        "        ne_weight * mix(ne_primary, ne_detail.rgb, ne_detail.a) + \n"
        "        nw_weight * mix(nw_primary, nw_detail.rgb, nw_detail.a); \n"

        "    return texel; \n"
        "} \n"


        // Snow splatter. This will whiten the texel based on elevation.
        "void oe_splat_winter(in vec2 splat_tc, in oe_SplatEnv env, inout vec4 texel) \n"
        "{ \n"
        "    float snowToggle = env.elevation > oe_splat_snow ? 1.0 : 0.0;\n"
        "    { \n"
        "        float snowiness = clamp(max(0.0, env.elevation-oe_splat_snow)/oe_splat_snow, 0.0, 0.8); \n"
        "        vec4 snow = vec4(1,1,1,1); \n"
        "        texel.rgb = mix(texel.rgb, snow.rgb, snowiness*snowToggle); \n"
        "    } \n"
        "} \n"

        // Gets the noise value at the given coordinates.
        // TODO: change this to use a texture versus the noise function. Noise is EXPENSIVE
        "float oe_splat_getNoise(in vec2 tc) \n"
        "{ \n"
        "    float n = oe_noise_fractal_2d(tc, oe_splat_freq, oe_splat_pers, oe_splat_lac, int(oe_splat_octaves)); \n"
        "    return n; \n"
        "} \n"

        // Scales the incoming tile splat coordinates to match the requested
        // LOD level. We offset the level from the current tile key's LOD (.z)
        // because otherwise you run into single-precision jitter at high LODs.
        "vec2 oe_splat_getSplatCoords(float lod)"
        "{ \n"
             //TODO: move the computation of "factor" to the vertex shader to avoid the expensive pow?
             // or perhaps convert it to a const lookup table?
        "    float dL = oe_tile_key.z - lod; \n"
        "    float factor = exp2(dL); \n"
        "    float invFactor = 1.0/factor; \n"
        "    vec2 scale = vec2(invFactor); \n"
        "    vec2 result = oe_layer_tilec.st * scale; \n"

        // For upsampling we need to calculate an offset as well
        "    float upSampleToggle = factor >= 1.0 ? 1.0 : 0.0;\n"
        "    { \n"
        "        vec2 a = floor(oe_tile_key.xy * invFactor); \n"
        "        vec2 b = a * factor; \n"
        "        vec2 c = (a+1.0) * factor; \n"
        "        vec2 offset = (oe_tile_key.xy-b)/(c-b); \n"
        "        result += upSampleToggle * offset; \n"
        "    } \n"

        "    return result; \n"
        "} \n"

        // Main entry point for fragment shader.
        "void oe_splat_fragment(inout vec4 color) \n"
        "{ \n"
        // Populate the environment:
        "    float noise = oe_splat_getNoise(oe_splat_covtc); \n" //TODO: use a texture instead; VERY EXPENSIVE
        "    float elevation = texture2D(oe_terrain_tex, oe_layer_tilec.st).r; \n" //TODO: eliminate if unused
        "    oe_SplatEnv env = oe_SplatEnv(oe_splat_range, elevation, noise); \n"

        // Mapping of view ranges to splat texture levels of detail.
        "#define RANGE_COUNT 9\n"
        "    const float ranges[RANGE_COUNT] = float[](  250.0, 500.0, 1000.0, 4000.0, 30000.0, 150000.0, 300000.0, 1000000.0, 5000000.0 );\n"
        "    const float lods  [RANGE_COUNT] = float[](  18.0,  17.0,   16.0,   14.0,    12.0,     10.0,      8.0,       6.0,       4.0 ); \n"

        // Choose the best range based on distance to camera.
        "    float d = clamp(oe_splat_range, ranges[0], ranges[RANGE_COUNT-1]); \n"

        "    vec4 texel; \n"

        // Find the 2 ranges bookending the camera range, and blend between then.
        // TODO: replace bilinear with nearest for far ranges?
        "    for(int i=0; i<RANGE_COUNT-1; ++i) \n"
        "    { \n"
        "        if ( d >= ranges[i] && d <= ranges[i+1] ) \n"
        "        { \n"
        "            float lod0 = lods[i] + oe_splat_scaleOffsetInt; \n"
        "            vec2 splat_tc0 = oe_splat_getSplatCoords(lod0); \n"
        "            vec4 texel0 = oe_splat_bilinear(splat_tc0, env); \n" //bilinear ? oe_splat_bilinear(splat_tc0, env) : oe_splat_nearest(splat_tc0, env); \n"
        
        "            float lod1 = lods[i+1] + oe_splat_scaleOffsetInt; \n"
        "            vec2 splat_tc1 = oe_splat_getSplatCoords(lod1); \n"
        "            vec4 texel1 = oe_splat_bilinear(splat_tc1, env);\n"//bilinear ? oe_splat_bilinear(splat_tc1, env) : oe_splat_nearest(splat_tc1, env); \n"

        "            float r = (d-ranges[i])/(ranges[i+1]-ranges[i]); \n"
        "            texel = mix(texel0, texel1, r); \n"
        
        "            oe_splat_winter(splat_tc1, env, texel);\n"

        "            break; \n"
        "        }\n"
        "    } \n"

        "    color = mix(color, texel, oe_splat_intensity*texel.a); \n"

        // uncomment to visualize slope.
        //"    color.rgba = vec4(oe_splat_slope,0,0,1);\n"
        "}\n";
}

#endif // OSGEARTH_SPLAT_SHADERS