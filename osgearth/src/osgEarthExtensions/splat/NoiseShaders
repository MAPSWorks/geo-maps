/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_NOISE_SHADERS
#define OSGEARTH_SPLAT_NOISE_SHADERS 1

#define NOISE_FUNC "oe_splat_noise"

#undef  MULTILINE
#define MULTILINE(...) #__VA_ARGS__

/**
 * Noise shader code adapted from "webgl-noise":
 * https://github.com/ashima/webgl-noise
 *
 * LICENSE (MIT):
 *
 * Copyright (C) 2011 by Ashima Arts (Simplex noise)
 * Copyright (C) 2011 by Stefan Gustavson (Classic noise)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ 
namespace
{
const char* noiseShaders = MULTILINE(

    vec3 oe_splat_mod289(vec3 x) {\n
      return x - floor(x * (1.0 / 289.0)) * 289.0;\n
    }\n

    vec2 oe_splat_mod289(vec2 x) {\n
      return x - floor(x * (1.0 / 289.0)) * 289.0;\n
    }\n

    vec3 oe_splat_permute(vec3 x) {\n
      return oe_splat_mod289(((x*34.0)+1.0)*x);\n
    }\n

    vec4 oe_splat_mod289(vec4 x) {\n
        return x - floor(x * (1.0 / 289.0)) * 289.0; }\n

    float oe_splat_mod289(float x) {\n
        return x - floor(x * (1.0 / 289.0)) * 289.0; }\n

    vec4 oe_splat_permute(vec4 x) {\n
        return oe_splat_mod289(((x*34.0)+1.0)*x);\n
    }\n

    float oe_splat_permute(float x) {\n
        return oe_splat_mod289(((x*34.0)+1.0)*x);\n
    }\n

    float oe_splat_noise2(vec2 v)\n
    {\n
        const vec4 C = vec4(0.211324865405187,  \n  // (3.0-sqrt(3.0))/6.0
                            0.366025403784439,  \n  // 0.5*(sqrt(3.0)-1.0)
                            -0.577350269189626, \n  // -1.0 + 2.0 * C.x
                            0.024390243902439); \n  // 1.0 / 41.0
    // First corner
        vec2 i  = floor(v + dot(v, C.yy) ); \n
        vec2 x0 = v -   i + dot(i, C.xx); \n

    // Other corners
        vec2 i1;\n
        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n
        vec4 x12 = x0.xyxy + C.xxzz;\n
        x12.xy -= i1;\n

    // Permutations
        i = oe_splat_mod289(i);\n // Avoid truncation effects in permutation
        vec3 p = oe_splat_permute( oe_splat_permute( i.y + vec3(0.0, i1.y, 1.0 ))\n
                    + i.x + vec3(0.0, i1.x, 1.0 ));\n

        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n
        m = m*m ;\n
        m = m*m ;\n

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n
        vec3 h = abs(x) - 0.5;\n
        vec3 ox = floor(x + 0.5);\n
        vec3 a0 = x - ox;\n

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h )
        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n

    // Compute final noise value at P
        vec3 g;\n
        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n
        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n
        return 130.0 * dot(m, g);\n
    }\n

    // Turbulence function
    float oe_splat_turbulence(in vec2 seed, in float freq) {\n
        float t = -0.5;\n
        for(; freq<127.0; freq*=2.0) {\n
            t += abs(oe_splat_noise2(seed/freq));\n
        }\n
        return t;\n
    }\n

    // Generates a fractal simplex noise value.
    float oe_noise_fractal_2d(in vec2 seed, in float frequency, in float persistence, in float lacunarity, in int octaves)
    {
        float f = frequency;
        float amp = 1.0;
        float maxAmp = 0.0;
        float n = 0.0;

        for(int i=0; i<octaves; ++i)
        {
            n += oe_splat_noise2(seed*f) * amp;
            maxAmp += amp;
            amp *= persistence;
            f *= lacunarity;
        }
        return n / maxAmp;
    }\n


); // end MULTILINE

}

#endif // OSGEARTH_SPLAT_NOISE_SHADERS
